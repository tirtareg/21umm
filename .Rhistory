train[train == "not reached"] <- "not_reached"
test[test == "Pencapaian 50%-100%"] <- "achiev_50%-100%"
test[test == "Pencapaian 100%-150%"] <- "achiev_100%-150%"
test[test == "Tidak diberikan target"] <- "achiev_< 50%"
test[test == "Pencapaian < 50%"] <- "achiev_< 50%"
test[test == "Pencapaian > 1.5"] <- "achiev_> 1.5"
test[test == "not reached"] <- "not_reached"
train <- mutate_if(train, is.character, as.factor)
test <- mutate_if(test, is.character, as.factor)
train <- train %>% mutate_all(na_if, "")
train <- droplevels(train)
test <- droplevels(test)
summary(train$year_graduated)
train <- train[, -16]
test <- test[, -16]
train <- train %>%
relocate(Best.Performance, .after = last_col())
train$Best.Performance <- factor(train$Best.Performance,
levels = c(0,1),
labels = c("not_reached", "reached"))
round(prop.table(table(train$Best.Performance))*100, 0)
a <- colSums(is.na(train))
b <- seq(1,length(a))
d <- round(colSums(is.na(train))/nrow(train)*100, 2)
c <- data.frame(peubah = b, banyaknya_NA = a, persen_NA = d)
arrange(c, desc(persen_NA))
arrange(c, desc(persen_NA))
train1 <- train[complete.cases(train), ]
test1 <- test
dim(train1)
table(train1$Best.Performance)
round(prop.table(table(train1$Best.Performance)) * 100, 0)
tipe <- NULL
nama <- NULL
for (i in (1 : (ncol(train1) - 1))) {
tipe[i] <- class(train1[, i])
nama[i] <- names(train1)[i]
}
data.frame(nama = nama, var = 1 : (ncol(train1) - 1), tipe = tipe)
data.frame(nama = nama, var = 1 : (ncol(train1) - 1), tipe = tipe)
# peubah numerik (2, 4, 5, 9, 11:13, 15:25)
sort(unique(train1[, 2]))  #numeric   job_duration_in_current_job_level
sort(unique(train1[, 9]))  #numeric   age (kelompokkan)
train1$age <- pisah(train1$age, train1$age, "freq")
# membuat fungsi split berdasarkan kesamaan frequency atau kesamaan lebar selang
pisah <- function(acuan, tujuan, n, method = "length") {
if (method == "freq") {
breaks <- c(-Inf, quantile(acuan, seq(1/n, 1/n*(n-1), by = 1/n)), Inf)
cut(tujuan, breaks)
} else {
selang <- max(acuan) - min(acuan)
breaks <- c(-Inf, seq(min(acuan)+selang/n, max(acuan)-selang/n, by = selang/n), Inf)
cut(tujuan, breaks)
}
}
train1$age <- pisah(train1$age, train1$age, "freq")
train1$age <- pisah(train1$age, train1$age, 4, "freq")
test1$age <- pisah(test1$age, test1$age, 4, "freq")
summary(train1$age)
train1$job_duration_as_permanent_worker <- pisah(train1$job_duration_as_permanent_worker, train1$job_duration_as_permanent_worker, 4, "freq")
test1$job_duration_as_permanent_worker <- pisah(test1$job_duration_as_permanent_worker, test1$job_duration_as_permanent_worker, 4, "freq")
unique(train1$job_duration_from_training)
train1$job_duration_from_training <- pisah(train1$job_duration_from_training, train1$job_duration_from_training, 4, "freq")
test1$job_duration_from_training <- pisah(test1$job_duration_from_training, test1$job_duration_from_training, 4, "freq")
unique(train1$branch_rotation)
train1$branch_rotation <- pisah(train1$branch_rotation, train1$branch_rotation, 4, "freq")
test1$branch_rotation <- pisah(test1$branch_rotation, test1$branch_rotation, 4, "freq")
train1$job_rotation <- pisah(train1$job_rotation, train1$job_rotation, 4, "freq")
test1$job_rotation <- pisah(test1$job_rotation, test1$job_rotation, 4, "freq")
table(train1$job_rotation)
unique(train1$assign_of_otherposition)
train1$assign_of_otherposition <- pisah(train1$assign_of_otherposition, train1$assign_of_otherposition, 4, "freq")
unique(train1$annual.leave)
unique(train1$sick.leave)
unique(train1$sicks.leave)
unique(train1$sick_leaves)
train1[, 25] <- as.factor(train1[, 25])
test[, 25] <- as.factor(test[, 25])
train1[, 25] <- as.factor(train1[, 25])
test1[, 25] <- as.factor(tes1t[, 25])
train1[, 25] <- as.factor(train1[, 25])
test1[, 25] <- as.factor(test1[, 25])
train1 <- train1[, -7]
test <- test[, -7]
tipe <- NULL
nama <- NULL
for (i in (1 : (ncol(train1) - 1))) {
tipe[i] <- class(train1[, i])
nama[i] <- names(train1)[i]
}
data.frame(nama = nama, var = 1 : (ncol(train1) - 1), tipe = tipe)
data.frame(nama = nama, var = 1 : (ncol(train1) - 1), tipe = tipe)
preProcess_range_model <- preProcess(train1, method='center')
train2 <- predict(preProcess_range_model, newdata = train1)
test2 <- predict(preProcess_range_model, newdata = test1)
### menjalankan algoritma SMOTE
library(DMwR)
set.seed(1000)
latih <- SMOTE(Best.Performance ~ ., data = train2, k = 5,
perc.over = 200, perc.under = 200)
# Performing Logistic Regression
Control <- trainControl(method = "cv",
number = 5)
smote_log <- train(Best.Performance ~.,
data = latih,
method = "glmnet",
trControl = Control)
smote_log
smote_logit <- smote_log
# Predicting Model on Train Data for Logistic Regression
pred.train <- predict(smote_logit, latih, type = "raw")
summary(pred.train)
pred.test <- predict(smote_logit, test1, type = "raw")
# Predicting Model on Train Data for Logistic Regression
pred.train <- predict(smote_logit, latih, type = "raw")
summary(pred.train)
pred.test <- predict(smote_logit, test2, type = "raw")
test2
test2$age
table(test2$age)
table(latih$age)
train <- read.csv("G:/My Drive/Dian/BRI HACKATON/People Analytic/train.csv")
test <- read.csv("G:/My Drive/Dian/BRI HACKATON/People Analytic/test.csv")
train[train == "Pencapaian 50%-100%"] <- "achiev_50%-100%"
train[train == "Pencapaian 100%-150%"] <- "achiev_100%-150%"
train[train == "Tidak diberikan target"] <- "achiev_< 50%"
train[train == "Pencapaian < 50%"] <- "achiev_< 50%"
train[train == "Pencapaian > 1.5"] <- "achiev_> 1.5"
train[train == "not reached"] <- "not_reached"
test[test == "Pencapaian 50%-100%"] <- "achiev_50%-100%"
test[test == "Pencapaian 100%-150%"] <- "achiev_100%-150%"
test[test == "Tidak diberikan target"] <- "achiev_< 50%"
test[test == "Pencapaian < 50%"] <- "achiev_< 50%"
test[test == "Pencapaian > 1.5"] <- "achiev_> 1.5"
test[test == "not reached"] <- "not_reached"
train <- mutate_if(train, is.character, as.factor)
test <- mutate_if(test, is.character, as.factor)
train <- train %>% mutate_all(na_if, "")
train <- droplevels(train)
test <- droplevels(test)
summary(train$year_graduated)
train <- train[, -16]
test <- test[, -16]
train <- train %>%
relocate(Best.Performance, .after = last_col())
train$Best.Performance <- factor(train$Best.Performance,
levels = c(0,1),
labels = c("not_reached", "reached"))
round(prop.table(table(train$Best.Performance))*100, 0)
a <- colSums(is.na(train))
b <- seq(1,length(a))
d <- round(colSums(is.na(train))/nrow(train)*100, 2)
c <- data.frame(peubah = b, banyaknya_NA = a, persen_NA = d)
arrange(c, desc(persen_NA))
train1 <- train[complete.cases(train), ]
test1 <- test
dim(train1)
table(train1$Best.Performance)
round(prop.table(table(train1$Best.Performance)) * 100, 0)
tipe <- NULL
nama <- NULL
for (i in (1 : (ncol(train1) - 1))) {
tipe[i] <- class(train1[, i])
nama[i] <- names(train1)[i]
}
data.frame(nama = nama, var = 1 : (ncol(train1) - 1), tipe = tipe)
train1$age <- pisah(train1$age, train1$age, 4, "freq")
test1$age <- pisah(train1$age, test1$age, 4, "freq")
train1 <- train[complete.cases(train), ]
test1 <- test
dim(train1)
table(train1$Best.Performance)
round(prop.table(table(train1$Best.Performance)) * 100, 0)
# membuat fungsi split berdasarkan kesamaan frequency atau kesamaan lebar selang
train2 <- train1
test2 <- test1
pisah <- function(acuan, tujuan, n, method = "length") {
if (method == "freq") {
breaks <- c(-Inf, quantile(acuan, seq(1/n, 1/n*(n-1), by = 1/n)), Inf)
cut(tujuan, breaks)
} else {
selang <- max(acuan) - min(acuan)
breaks <- c(-Inf, seq(min(acuan)+selang/n, max(acuan)-selang/n, by = selang/n), Inf)
cut(tujuan, breaks)
}
}
# membuat fungsi split berdasarkan kesamaan frequency atau kesamaan lebar selang
train2 <- train1
test2 <- test1
pisah <- function(acuan, tujuan, n, method = "length") {
if (method == "freq") {
breaks <- c(-Inf, quantile(acuan, seq(1/n, 1/n*(n-1), by = 1/n)), Inf)
cut(tujuan, breaks)
} else {
selang <- max(acuan) - min(acuan)
breaks <- c(-Inf, seq(min(acuan)+selang/n, max(acuan)-selang/n, by = selang/n), Inf)
cut(tujuan, breaks)
}
}
# membuat fungsi split berdasarkan kesamaan frequency atau kesamaan lebar selang
pisah <- function(acuan, tujuan, n, method = "length") {
if (method == "freq") {
breaks <- c(-Inf, quantile(acuan, seq(1/n, 1/n*(n-1), by = 1/n)), Inf)
cut(tujuan, breaks)
} else {
selang <- max(acuan) - min(acuan)
breaks <- c(-Inf, seq(min(acuan)+selang/n, max(acuan)-selang/n, by = selang/n), Inf)
cut(tujuan, breaks)
}
}
train2
test2
train <- read.csv("G:/My Drive/Dian/BRI HACKATON/People Analytic/train.csv")
test <- read.csv("G:/My Drive/Dian/BRI HACKATON/People Analytic/test.csv")
train[train == "Pencapaian 50%-100%"] <- "achiev_50%-100%"
train[train == "Pencapaian 100%-150%"] <- "achiev_100%-150%"
train[train == "Tidak diberikan target"] <- "achiev_< 50%"
train[train == "Pencapaian < 50%"] <- "achiev_< 50%"
train[train == "Pencapaian > 1.5"] <- "achiev_> 1.5"
train[train == "not reached"] <- "not_reached"
test[test == "Pencapaian 50%-100%"] <- "achiev_50%-100%"
test[test == "Pencapaian 100%-150%"] <- "achiev_100%-150%"
test[test == "Tidak diberikan target"] <- "achiev_< 50%"
test[test == "Pencapaian < 50%"] <- "achiev_< 50%"
test[test == "Pencapaian > 1.5"] <- "achiev_> 1.5"
test[test == "not reached"] <- "not_reached"
train <- mutate_if(train, is.character, as.factor)
test <- mutate_if(test, is.character, as.factor)
train <- train %>% mutate_all(na_if, "")
train <- droplevels(train)
test <- droplevels(test)
summary(train$year_graduated)
train <- train[, -16]
test <- test[, -16]
train <- train %>%
relocate(Best.Performance, .after = last_col())
train$Best.Performance <- factor(train$Best.Performance,
levels = c(0,1),
labels = c("not_reached", "reached"))
round(prop.table(table(train$Best.Performance))*100, 0)
a <- colSums(is.na(train))
b <- seq(1,length(a))
d <- round(colSums(is.na(train))/nrow(train)*100, 2)
c <- data.frame(peubah = b, banyaknya_NA = a, persen_NA = d)
arrange(c, desc(persen_NA))
train1 <- train[complete.cases(train), ]
test1 <- test
dim(train1)
table(train1$Best.Performance)
round(prop.table(table(train1$Best.Performance)) * 100, 0)
tipe <- NULL
nama <- NULL
for (i in (1 : (ncol(train1) - 1))) {
tipe[i] <- class(train1[, i])
nama[i] <- names(train1)[i]
}
data.frame(nama = nama, var = 1 : (ncol(train1) - 1), tipe = tipe)
# membuat fungsi split berdasarkan kesamaan frequency atau kesamaan lebar selang
pisah <- function(acuan, tujuan, n, method = "length") {
if (method == "freq") {
breaks <- c(-Inf, quantile(acuan, seq(1/n, 1/n*(n-1), by = 1/n)), Inf)
cut(tujuan, breaks)
} else {
selang <- max(acuan) - min(acuan)
breaks <- c(-Inf, seq(min(acuan)+selang/n, max(acuan)-selang/n, by = selang/n), Inf)
cut(tujuan, breaks)
}
}
# membuat fungsi split berdasarkan kesamaan frequency atau kesamaan lebar selang
pisah <- function(acuan, tujuan, n, method = "length") {
if (method == "freq") {
breaks <- c(-Inf, quantile(acuan, seq(1/n, 1/n*(n-1), by = 1/n)), Inf)
cut(tujuan, breaks)
} else {
selang <- max(acuan) - min(acuan)
breaks <- c(-Inf, seq(min(acuan)+selang/n, max(acuan)-selang/n, by = selang/n), Inf)
cut(tujuan, breaks)
}
}
# membuat fungsi split berdasarkan kesamaan frequency atau kesamaan lebar selang
pisah <- function(acuan, tujuan, n, method = "length") {
if (method == "freq") {
breaks <- c(-Inf, quantile(acuan, seq(1/n, 1/n*(n-1), by = 1/n)), Inf)
cut(tujuan, breaks)
} else {
selang <- max(acuan) - min(acuan)
breaks <- c(-Inf, seq(min(acuan)+selang/n, max(acuan)-selang/n, by = selang/n), Inf)
cut(tujuan, breaks)
}
}
train2 <- train1
test2 <- test1
train2$age <- pisah(train1$age, train2$age, 4, "freq")
test2$age <- pisah(train1$age, test2$age, 4, "freq")
train2$job_duration_as_permanent_worker <- pisah(train1$job_duration_as_permanent_worker, train2$job_duration_as_permanent_worker, 4, "freq")
test2$job_duration_as_permanent_worker <- pisah(train1$job_duration_as_permanent_worker, test2$job_duration_as_permanent_worker, 4, "freq")
train2$job_duration_from_training <- pisah(train1$job_duration_from_training, train2$job_duration_from_training, 4, "freq")
test2$job_duration_from_training <- pisah(train1$job_duration_from_training, test2$job_duration_from_training, 4, "freq")
train2$branch_rotation <- pisah(train1$branch_rotation, train2$branch_rotation, 4, "freq")
test2$branch_rotation <- pisah(train1$branch_rotation, test2$branch_rotation, 4, "freq")
train2$job_rotation <- pisah(train1$job_rotation, train2$job_rotation, 4, "freq")
test2$job_rotation <- pisah(train1$job_rotation, test2$job_rotation, 4, "freq")
train1[, 25] <- as.factor(train1[, 25])
test1[, 25] <- as.factor(test1[, 25])
train2 <- train2[, -7]
test2 <- test2[, -7]
tipe <- NULL
nama <- NULL
for (i in (1 : (ncol(train2) - 1))) {
tipe[i] <- class(train2[, i])
nama[i] <- names(train2)[i]
}
data.frame(nama = nama, var = 1 : (ncol(train2) - 1), tipe = tipe)
data.frame(nama = nama, var = 1 : (ncol(train2) - 1), tipe = tipe)
preProcess_range_model <- preProcess(train2, method='center')
train2 <- predict(preProcess_range_model, newdata = train2)
test2 <- predict(preProcess_range_model, newdata = test2)
### menjalankan algoritma SMOTE
library(DMwR)
set.seed(1000)
latih <- SMOTE(Best.Performance ~ ., data = train2, k = 5,
perc.over = 200, perc.under = 200)
# Performing Logistic Regression
Control <- trainControl(method = "cv",
number = 5)
smote_logit <- train(Best.Performance ~.,
data = latih,
method = "glmnet",
trControl = Control)
smote_logit
# Predicting Model on Train Data for Logistic Regression
pred.train <- predict(smote_logit, latih, type = "raw")
summary(pred.train)
pred.test <- predict(smote_logit, test2, type = "raw")
summary(pred.test)
hasil <- data.frame(index = 1 : nrow(test1),
`Best Performance` = pred.test)
write.csv(hasil, "hasil_smote_logit_04.csv")
# Performing Logistic Regression
Control <- trainControl(method = "cv",
number = 5)
# Training neural net
smote_ranger <- train(Best.Performance ~ .,
data = latih,
trControl = Control, method = "ranger")
smote_ranger
# Performing Random Forest
Control <- trainControl(method = "cv",
number = 5)
smote_rf <- train(Best.Performance ~ ., data = latih,
trCtrl = Control,
method = "rf")
smote_rf
knitr::opts_chunk$set(echo = TRUE)
library(mlr3)
install.packages(ask = F)
update.packages(ask = F, checkBuilt = T)
dim(iris)
train <- sample(1:150, 0.8*150)
train
latih <- iris[train,]
test <- setdiff(iris, train)
dim(test)
test <- setdiff(iris, latih)
dim(test)
train
setdiff
test <- setdiff(1:150, train)
test
test <- iris[setdiff(1:150, train), ]
test
names(iris)
install.packages('discretization')
library(discretization)
mdlp(latih[, c(1, 5)])
mdlp(latih[, c(1, 5)])$cutp
mdlp(latih[, c(1, 5)])$cutp[[1]]
c(-Inf, mdlp(latih[, c(1, 5)])$cutp[[1]], Inf)
?mdlp
cutIndex(iris)
?cutIndex
cutIndex(iris[,1], iris[,5])
cutIndex(iris[,3], iris[,5])
c(-Inf, mdlp(latih[, c(1, 5)])$cutp[[1]], Inf)
cut(a, test[,1])
a <- c(-Inf, mdlp(latih[, c(1, 5)])$cutp[[1]], Inf)
cut(a, test[,1])
a
test[,1]
?cut
cut(a, test[,1])
cut(test[,1], a)
cut(test[,1], a, labels = F)
cut(train[,1], a, labels = F)
cut(latih[,1], a, labels = F)
library(tidyverse)
mtcars
data <- iris
head(data)
data %>%
group_by(Species) %>%
mutate(rata2 = mean(Sepal.Length))
data %>%
group_by(Species) %>%
mutate(rata2 = mean(Sepal.Length))
View(data %>%
group_by(Species) %>%
mutate(rata2 = mean(Sepal.Length)))
data %>%
group_by(Species) %>%
mutate(rata2 = mean(Sepal.Length),
delta = Sepal.Length - rata2)
data %>%
group_by(Species) %>%
summarise(rata2 = mean(Sepal.Length))
data %>%
select(Sepal.Length, Species) %>%
group_by(Species) %>%
mutate(rata2 = mean(Sepal.Length),
delta = Sepal.Length - rata2)
data %>%
select(Sepal.Length, Species) %>%
group_by(Species) %>%
mutate(rata2 = mean(Sepal.Length),
delta = Sepal.Length - rata2,
delta2 = delta^2)
data %>%
select(Sepal.Length, Species) %>%
group_by(Species) %>%
mutate(rata2 = mean(Sepal.Length),
delta = Sepal.Length - rata2,
delta2 = delta^2,
n = n())
data %>%
select(Sepal.Length, Species) %>%
group_by(Species) %>%
mutate(rata2 = mean(Sepal.Length),
delta = Sepal.Length - rata2,
delta2 = delta^2,
n = n()) %>%
group_by(Species) %>%
summarize(sd = sqrt(sum(delta2)/mean(n)))
data %>%
group_by(Species) %>%
summarise(rata2 = mean(Sepal.Length),
sd = sd(Sepal.Length))
data %>%
select(Sepal.Length, Species) %>%
group_by(Species) %>%
mutate(rata2 = mean(Sepal.Length),
delta = Sepal.Length - rata2,
delta2 = delta^2,
n = n()) %>%
group_by(Species) %>%
summarize(sd = sqrt(sum(delta2)/(mean(n)-1)))
data %>%
select(Sepal.Length, Species) %>%
group_by(Species) %>%
mutate(rata2 = mean(Sepal.Length),
delta = Sepal.Length - rata2,
delta2 = delta^2,
n = n())
library(tidyverse)
table1
table2
table3
table4
table4a
table4b
dim(table1)
table1
table1 %>%
mutate(rate = case / population * 100)
table1 %>%
mutate(rate = cases / population * 100)
table1 %>%
mutate(rate = cases / population * 10000)
table1 %>%
group_by(year) %>%
summarise(case = sum(cases))
table1 %>%
group_by(year) %>%
summarise(n = sum(cases))
# cases per year
table1 %>%
count(year, wt = cases)
library(ggplot2)
ggplot(table1, aes(year, cases))
ggplot(table1, aes(year, cases)) +
geom_line()
ggplot(table1, aes(year, cases)) +
geom_line(aes(group = country))
ggplot(table1, aes(year, cases)) +
geom_line(aes(group = country), color = "grey50")
ggplot(table1, aes(year, cases)) +
geom_line(aes(group = country), color = "grey50") +
geom_point(aes(colour = country))
ggplot(table1, aes(year, cases)) +
geom_line(aes(group = country), colour = "grey50") +
geom_point(aes(colour = country))
update.packages(ask = F, checkBuilt = T)
update.packages(ask = F, checkBuilt = T)
library(xfun)
remove.packages("xfun", lib="~/R/win-library/4.1")
install.packages("xfun", lib="~/R/win-library/4.1", dependencies = T)
install.packages("xfun", lib = "~/R/win-library/4.1", dependencies = T)
update.packages(ask = F, checkBuilt = T)
q()
update.packages(ask = F, checkBuilt = T)
update.packages(ask = F, checkBuilt = T)
library(tidyverse)
setwd("G:/My Drive/#PMB/2021/04_D3 dan Alih Jenjang/21umm")
